# Tests for matrix_divided function
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Basic test with a simple matrix
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Verify that the original matrix is not modified
>>> matrix
[[1, 2, 3], [4, 5, 6]]

# Test with different types of numbers
>>> matrix = [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6]]
>>> matrix_divided(matrix, 2)
[[0.55, 1.1, 1.65], [2.2, 2.75, 3.3]]

# Test with division by a float
>>> matrix_divided([[10, 20], [30, 40]], 2.5)
[[4.0, 8.0], [12.0, 16.0]]

# Error test: division by zero
>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

# Error test: divisor is not a number
>>> matrix_divided([[1, 2], [3, 4]], "divisor")
Traceback (most recent call last):
TypeError: div must be a number

# Error test: matrix is not a list of lists
>>> matrix_divided("not a matrix", 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Error test: matrix contains non-numeric elements
>>> matrix_divided([[1, "two"], [3, 4]], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Error test: rows of different sizes
>>> matrix_divided([[1, 2, 3], [4, 5]], 2)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

# Test with an empty matrix
>>> matrix_divided([], 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test with empty rows of the same size
>>> matrix_divided([[], []], 2)
[[], []]
